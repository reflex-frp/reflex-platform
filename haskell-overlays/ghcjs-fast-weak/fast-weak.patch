diff --git a/lib/boot/shims/src/gc.js b/lib/boot/shims/src/gc.js
index 76321b2..a2cf416 100644
--- a/lib/boot/shims/src/gc.js
+++ b/lib/boot/shims/src/gc.js
@@ -444,6 +444,50 @@ function h$follow(obj, sp) {
             } else if(typeof c.len === 'number' && c.buf instanceof ArrayBuffer) {
                 TRACE_GC("marking ByteArray");
                 MARK_OBJ(c);
+            } else if(c instanceof h$FastWeak) {
+              MARK_OBJ(c);
+              if(c.ticket !== null && !IS_MARKED(c.ticket)) {
+                c.ticket = null; // If the ticket isn't reachable, this will let it get cleaned up by the JS gc; if it is reachable, it'll fill this back in
+              }
+            } else if(c instanceof h$FastWeakTicket) {
+              MARK_OBJ(c);
+              if(!IS_MARKED(c.val)) {
+                ADDW(c.val);
+              }
+              if(IS_MARKED(c.weak)) {
+                // In this case, the weak side has been marked first, which means it's been cleared; restore it
+                c.weak.ticket = c;
+              }
+            } else if(c instanceof h$FastWeakBag) {
+              MARK_OBJ(c);
+              var j = 0; // j should always be equal to the number of not-yet-necessarily-dead tickets that have been traversed; this should always be less than or equal to i
+              for(i = 0; i < c.tickets.length; i++) {
+                // Any nulls left in the array prior to checking on the tickets must be tickets that died in the last GC, so we ignore them
+                if(c.tickets[i] !== null) {
+                  if(j !== i) {
+                    c.tickets[i].pos = j;
+                  }
+                  if(!IS_MARKED(c.tickets[i])) {
+                    // If the ticket isn't reachable, this will let it get cleaned up by the JS gc; if it is reachable, it'll fill this back in
+                    c.tickets[j] = null;
+                  } else if(j !== i) {
+                    // We need to move the item
+                    c.tickets[j] = c.tickets[i];
+                  } // If it's marked and not moving, don't do anything
+                  j++;
+                }
+              }
+              c.tickets.length = j; // Shrink the array if any nulls have been dropped
+            } else if(c instanceof h$FastWeakBagTicket) {
+              MARK_OBJ(c);
+              if(!IS_MARKED(c.val)) {
+                ADDW(c.val);
+              }
+              if(IS_MARKED(c.bag)) {
+                // In this case, the weak side has been marked first, which means it's been cleared; restore it
+                c.bag.tickets[c.pos] = c;
+              }
+
             } else if(c instanceof h$Weak) {
                 MARK_OBJ(c);
             } else if(c instanceof h$MVar) {
diff --git a/lib/boot/shims/src/weak.js b/lib/boot/shims/src/weak.js
index 8df313b..d537027 100644
--- a/lib/boot/shims/src/weak.js
+++ b/lib/boot/shims/src/weak.js
@@ -87,3 +87,27 @@ function h$finalizeWeak(w) {
         RETURN_UBX_TUP2(r, 1);
     }
 }
+
+function h$FastWeak(ticket) {
+  this.ticket = ticket;
+  this.m = 0;
+}
+
+function h$FastWeakTicket(val) {
+  this.val = val;
+  this.weak = new h$FastWeak(this);
+  this.m = 0;
+}
+
+function h$FastWeakBag() {
+  this.tickets = [];
+  this.m = 0;
+}
+
+function h$FastWeakBagTicket(bag, val) {
+  this.val = val;
+  this.bag = bag;
+  this.pos = bag.tickets.length;
+  bag.tickets.push(this);
+  this.m = 0;
+};
